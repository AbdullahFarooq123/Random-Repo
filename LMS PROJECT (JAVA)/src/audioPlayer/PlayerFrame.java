/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package audioPlayer;

import jaco.mp3.player.MP3Player;

import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.nio.file.Paths;

/**
 * @author Majey
 */
@SuppressWarnings("serial")
public class PlayerFrame extends javax.swing.JFrame {

    // Now Check If Repeat Button is Enabled or not
    private static boolean repeat = false;
    // Define MP3Player Class From JACO MP3Player Lib
    MP3Player player;
    // Define File For Song
    File songFile;
    // Define Current Directory Like If We Use JFileChooser then where it states.
    String currentDirectory = "home.user"; // I am using home.user this will call file chooser in user documents.
    // Here I define currentPath of the running app class
    String currentPath;
    // This String Will Be For Image Name or Path
    String imagePath;
    // We need to set app title as string
    String appName = "Player";
    // Here I am making a boolean for windowCollapsed
    boolean windowCollapsed = false;
    // Here I need to define mouse x and y for to get mouse position on screen.
    int xMouse, yMouse;
    private boolean running = false;
    // Variables declaration - do not modify
    private javax.swing.JLabel appTitle;
    private javax.swing.JLabel repeatBtn;
    private javax.swing.JLabel songNameDisplay;

    public PlayerFrame ( String file  ) {
        runPlayer(file);
    }

    public void stopPlayer ( ) {
        running = false;
        player.stop ( );
    }

    public void runPlayer ( String filePath ) {
        // Here I need to initialize the file path when starting the player
        if ( !this.isActive ( ) )
            initComponents ( );
        // Set App Title Here
        appTitle.setText ( appName );
        setVisible ( true );
        running = true;

        // Here I am going to set a default song file. It's not necessary.
        songFile = new File ( filePath );

        // Now make a string to get file name
        String fileName = songFile.getName ( );
        // Here set our song name label with this name
        songNameDisplay.setText ( fileName );

        // Add our method to player variable
        player = mp3Player ( );
        // Now add song to player as playlist.
        player.addToPlayList ( songFile );

        // Here get current path and images path in strings
        currentPath = Paths.get ( "." ).toAbsolutePath ( ).normalize ( ).toString ( );
        imagePath = "\\images";
        player.play ( );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents ( ) {
        JPanel mainPanel = new JPanel ( );
        JPanel headerPanel = new JPanel ( );
        appTitle = new javax.swing.JLabel ( );
        JLabel quitBtn = new JLabel ( );
        JLabel settingsBtn = new JLabel ( );
        JPanel songNameMainPanel = new JPanel ( );
        JPanel songNameSubPanel = new JPanel ( );
        songNameDisplay = new javax.swing.JLabel ( );
        JPanel controlPanel = new JPanel ( );
        repeatBtn = new javax.swing.JLabel ( );
        JLabel pauseBtn = new JLabel ( );
        JLabel playBtn = new JLabel ( );
        JLabel stopBtn = new JLabel ( );
        JLabel openBtn = new JLabel ( );
        JLabel jLabel7 = new JLabel ( );
        JLabel volumeDownBtn = new JLabel ( );
        JLabel volumeUpBtn = new JLabel ( );
        JLabel volumeFullBtn = new JLabel ( );
        JLabel muteBtn = new JLabel ( );

        setDefaultCloseOperation ( javax.swing.WindowConstants.EXIT_ON_CLOSE );
        setUndecorated ( true );
        setResizable ( false );
        //setAlwaysOnTop ( true );

        mainPanel.setBackground ( new java.awt.Color ( 7 , 63 , 86 ) );

        headerPanel.setBackground ( new java.awt.Color ( 36 , 93 , 116 ) );

        appTitle.setFont ( new java.awt.Font ( "Nirmala UI" , Font.PLAIN , 18 ) ); // NOI18N
        appTitle.setForeground ( new java.awt.Color ( 34 , 202 , 237 ) );
        appTitle.setText ( "AudioPlayer" );
        appTitle.addMouseMotionListener ( new java.awt.event.MouseMotionAdapter ( ) {
            public void mouseDragged ( java.awt.event.MouseEvent evt ) {
                appTitleMouseDragged ( evt );
            }
        } );
        appTitle.addMouseListener ( new java.awt.event.MouseAdapter ( ) {
            public void mouseClicked ( java.awt.event.MouseEvent evt ) {
                appTitleMouseClicked ( evt );
            }

            public void mousePressed ( java.awt.event.MouseEvent evt ) {
                appTitleMousePressed ( evt );
            }
        } );

        quitBtn.setHorizontalAlignment ( javax.swing.SwingConstants.CENTER );
        quitBtn.setIcon ( new javax.swing.ImageIcon ( getClass ( ).getResource ( "/audioPlayer/images/quit.png" ) ) ); // NOI18N
        quitBtn.addMouseListener ( new java.awt.event.MouseAdapter ( ) {
            public void mouseClicked ( java.awt.event.MouseEvent evt ) {
                quitBtnMouseClicked ( );
            }
        } );

        settingsBtn.setHorizontalAlignment ( javax.swing.SwingConstants.CENTER );
        settingsBtn.setIcon ( new javax.swing.ImageIcon ( getClass ( ).getResource ( "/audioPlayer/images/settings.png" ) ) ); // NOI18N
        settingsBtn.addMouseListener ( new java.awt.event.MouseAdapter ( ) {
            public void mouseClicked ( java.awt.event.MouseEvent evt ) {
                settingsBtnMouseClicked ( );
            }
        } );

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout ( headerPanel );
        headerPanel.setLayout ( headerPanelLayout );
        headerPanelLayout.setHorizontalGroup (
                headerPanelLayout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                        .addGroup ( headerPanelLayout.createSequentialGroup ( )
                                .addContainerGap ( )
                                .addComponent ( appTitle , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE )
                                .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.RELATED )
                                .addComponent ( settingsBtn , javax.swing.GroupLayout.PREFERRED_SIZE , 50 , javax.swing.GroupLayout.PREFERRED_SIZE )
                                .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.RELATED )
                                .addComponent ( quitBtn , javax.swing.GroupLayout.PREFERRED_SIZE , 50 , javax.swing.GroupLayout.PREFERRED_SIZE ) )
        );
        headerPanelLayout.setVerticalGroup (
                headerPanelLayout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                        .addComponent ( appTitle , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE )
                        .addComponent ( quitBtn , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE )
                        .addComponent ( settingsBtn , javax.swing.GroupLayout.DEFAULT_SIZE , 50 , Short.MAX_VALUE )
        );

        songNameMainPanel.setBackground ( new java.awt.Color ( 7 , 63 , 86 ) );

        songNameSubPanel.setBackground ( new java.awt.Color ( 7 , 63 , 86 ) );
        songNameSubPanel.setBorder ( new javax.swing.border.LineBorder ( new java.awt.Color ( 34 , 202 , 237 ) , 1 , true ) );

        songNameDisplay.setFont ( new java.awt.Font ( "Nirmala UI" , Font.PLAIN , 12 ) ); // NOI18N
        songNameDisplay.setForeground ( new java.awt.Color ( 34 , 202 , 237 ) );
        songNameDisplay.setHorizontalAlignment ( javax.swing.SwingConstants.CENTER );
        songNameDisplay.setText ( "PLAYING" );

        javax.swing.GroupLayout songNameSubPanelLayout = new javax.swing.GroupLayout ( songNameSubPanel );
        songNameSubPanel.setLayout ( songNameSubPanelLayout );
        songNameSubPanelLayout.setHorizontalGroup (
                songNameSubPanelLayout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                        .addGap ( 0 , 0 , Short.MAX_VALUE )
                        .addGroup ( songNameSubPanelLayout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                                .addGroup ( songNameSubPanelLayout.createSequentialGroup ( )
                                        .addContainerGap ( )
                                        .addComponent ( songNameDisplay , javax.swing.GroupLayout.DEFAULT_SIZE , 950 , Short.MAX_VALUE )
                                        .addContainerGap ( ) ) )
        );
        songNameSubPanelLayout.setVerticalGroup (
                songNameSubPanelLayout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                        .addGap ( 0 , 36 , Short.MAX_VALUE )
                        .addGroup ( songNameSubPanelLayout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                                .addComponent ( songNameDisplay , javax.swing.GroupLayout.DEFAULT_SIZE , 36 , Short.MAX_VALUE ) )
        );

        javax.swing.GroupLayout songNameMainPanelLayout = new javax.swing.GroupLayout ( songNameMainPanel );
        songNameMainPanel.setLayout ( songNameMainPanelLayout );
        songNameMainPanelLayout.setHorizontalGroup (
                songNameMainPanelLayout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                        .addGroup ( songNameMainPanelLayout.createSequentialGroup ( )
                                .addContainerGap ( )
                                .addComponent ( songNameSubPanel , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE )
                                .addContainerGap ( ) )
        );
        songNameMainPanelLayout.setVerticalGroup (
                songNameMainPanelLayout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                        .addGroup ( songNameMainPanelLayout.createSequentialGroup ( )
                                .addContainerGap ( )
                                .addComponent ( songNameSubPanel , javax.swing.GroupLayout.PREFERRED_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.PREFERRED_SIZE )
                                .addContainerGap ( javax.swing.GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE ) )
        );

        controlPanel.setBackground ( new java.awt.Color ( 7 , 63 , 86 ) );

        repeatBtn.setHorizontalAlignment ( javax.swing.SwingConstants.CENTER );
        repeatBtn.setIcon ( new javax.swing.ImageIcon ( getClass ( ).getResource ( "/audioPlayer/images/repeat.png" ) ) ); // NOI18N
        repeatBtn.addMouseListener ( new java.awt.event.MouseAdapter ( ) {
            public void mouseClicked ( java.awt.event.MouseEvent evt ) {
                repeatBtnMouseClicked ( );
            }
        } );

        pauseBtn.setHorizontalAlignment ( javax.swing.SwingConstants.CENTER );
        pauseBtn.setIcon ( new javax.swing.ImageIcon ( getClass ( ).getResource ( "/audioPlayer/images/pause.png" ) ) ); // NOI18N
        pauseBtn.addMouseListener ( new java.awt.event.MouseAdapter ( ) {
            public void mouseClicked ( java.awt.event.MouseEvent evt ) {
                pauseBtnMouseClicked ( );
            }
        } );

        playBtn.setHorizontalAlignment ( javax.swing.SwingConstants.CENTER );
        playBtn.setIcon ( new javax.swing.ImageIcon ( getClass ( ).getResource ( "/audioPlayer/images/play.png" ) ) ); // NOI18N
        playBtn.addMouseListener ( new java.awt.event.MouseAdapter ( ) {
            public void mouseClicked ( java.awt.event.MouseEvent evt ) {
                playBtnMouseClicked ( );
            }
        } );

        stopBtn.setHorizontalAlignment ( javax.swing.SwingConstants.CENTER );
        stopBtn.setIcon ( new javax.swing.ImageIcon ( getClass ( ).getResource ( "/audioPlayer/images/stop.png" ) ) ); // NOI18N
        stopBtn.addMouseListener ( new java.awt.event.MouseAdapter ( ) {
            public void mouseClicked ( java.awt.event.MouseEvent evt ) {
                stopBtnMouseClicked ( );
            }
        } );

        openBtn.setHorizontalAlignment ( javax.swing.SwingConstants.CENTER );
        openBtn.setIcon ( new javax.swing.ImageIcon ( getClass ( ).getResource ( "/audioPlayer/images/open.png" ) ) ); // NOI18N
        openBtn.addMouseListener ( new java.awt.event.MouseAdapter ( ) {
            public void mouseClicked ( java.awt.event.MouseEvent evt ) {
                openBtnMouseClicked ( );
            }
        } );

        jLabel7.setHorizontalAlignment ( javax.swing.SwingConstants.CENTER );

        volumeDownBtn.setHorizontalAlignment ( javax.swing.SwingConstants.CENTER );
        volumeDownBtn.setIcon ( new javax.swing.ImageIcon ( getClass ( ).getResource ( "/audioPlayer/images/volume_down.png" ) ) ); // NOI18N
        volumeDownBtn.addMouseListener ( new java.awt.event.MouseAdapter ( ) {
            public void mouseClicked ( java.awt.event.MouseEvent evt ) {
                volumeDownBtnMouseClicked ( );
            }
        } );

        volumeUpBtn.setHorizontalAlignment ( javax.swing.SwingConstants.CENTER );
        volumeUpBtn.setIcon ( new javax.swing.ImageIcon ( getClass ( ).getResource ( "/audioPlayer/images/volume_up.png" ) ) ); // NOI18N
        volumeUpBtn.addMouseListener ( new java.awt.event.MouseAdapter ( ) {
            public void mouseClicked ( java.awt.event.MouseEvent evt ) {
                volumeUpBtnMouseClicked ( );
            }
        } );

        volumeFullBtn.setHorizontalAlignment ( javax.swing.SwingConstants.CENTER );
        volumeFullBtn.setIcon ( new javax.swing.ImageIcon ( getClass ( ).getResource ( "/audioPlayer/images/volume_full.png" ) ) ); // NOI18N
        volumeFullBtn.addMouseListener ( new java.awt.event.MouseAdapter ( ) {
            public void mouseClicked ( java.awt.event.MouseEvent evt ) {
                volumeFullBtnMouseClicked ( );
            }
        } );

        muteBtn.setHorizontalAlignment ( javax.swing.SwingConstants.CENTER );
        muteBtn.setIcon ( new javax.swing.ImageIcon ( getClass ( ).getResource ( "/audioPlayer/images/mute.png" ) ) ); // NOI18N
        muteBtn.addMouseListener ( new java.awt.event.MouseAdapter ( ) {
            public void mouseClicked ( java.awt.event.MouseEvent evt ) {
                muteBtnMouseClicked ( );
            }
        } );

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout ( controlPanel );
        controlPanel.setLayout ( controlPanelLayout );
        controlPanelLayout.setHorizontalGroup (
                controlPanelLayout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                        .addGroup ( controlPanelLayout.createSequentialGroup ( )
                                .addContainerGap ( )
                                .addComponent ( repeatBtn , javax.swing.GroupLayout.PREFERRED_SIZE , 80 , javax.swing.GroupLayout.PREFERRED_SIZE )
                                .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.RELATED )
                                .addComponent ( pauseBtn , javax.swing.GroupLayout.PREFERRED_SIZE , 80 , javax.swing.GroupLayout.PREFERRED_SIZE )
                                .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.RELATED )
                                .addComponent ( playBtn , javax.swing.GroupLayout.PREFERRED_SIZE , 120 , javax.swing.GroupLayout.PREFERRED_SIZE )
                                .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.RELATED )
                                .addComponent ( stopBtn , javax.swing.GroupLayout.PREFERRED_SIZE , 80 , javax.swing.GroupLayout.PREFERRED_SIZE )
                                .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.RELATED )
                                .addComponent ( openBtn , javax.swing.GroupLayout.PREFERRED_SIZE , 80 , javax.swing.GroupLayout.PREFERRED_SIZE )
                                .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.RELATED )
                                .addComponent ( jLabel7 , javax.swing.GroupLayout.PREFERRED_SIZE , 20 , javax.swing.GroupLayout.PREFERRED_SIZE )
                                .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.RELATED )
                                .addComponent ( volumeDownBtn )
                                .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.RELATED )
                                .addComponent ( volumeUpBtn )
                                .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.RELATED )
                                .addComponent ( volumeFullBtn )
                                .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.RELATED )
                                .addComponent ( muteBtn )
                                .addContainerGap ( javax.swing.GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE ) )
        );
        controlPanelLayout.setVerticalGroup (
                controlPanelLayout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                        .addGroup ( controlPanelLayout.createSequentialGroup ( )
                                .addContainerGap ( )
                                .addGroup ( controlPanelLayout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                                        .addComponent ( repeatBtn , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE )
                                        .addComponent ( pauseBtn , javax.swing.GroupLayout.DEFAULT_SIZE , 129 , Short.MAX_VALUE )
                                        .addComponent ( playBtn , javax.swing.GroupLayout.DEFAULT_SIZE , 129 , Short.MAX_VALUE )
                                        .addComponent ( stopBtn , javax.swing.GroupLayout.DEFAULT_SIZE , 129 , Short.MAX_VALUE )
                                        .addComponent ( openBtn , javax.swing.GroupLayout.DEFAULT_SIZE , 129 , Short.MAX_VALUE )
                                        .addComponent ( jLabel7 , javax.swing.GroupLayout.DEFAULT_SIZE , 129 , Short.MAX_VALUE )
                                        .addComponent ( volumeDownBtn , javax.swing.GroupLayout.DEFAULT_SIZE , 129 , Short.MAX_VALUE )
                                        .addComponent ( volumeUpBtn , javax.swing.GroupLayout.DEFAULT_SIZE , 129 , Short.MAX_VALUE )
                                        .addComponent ( volumeFullBtn , javax.swing.GroupLayout.DEFAULT_SIZE , 129 , Short.MAX_VALUE )
                                        .addComponent ( muteBtn , javax.swing.GroupLayout.DEFAULT_SIZE , 129 , Short.MAX_VALUE ) ) )
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout ( mainPanel );
        mainPanel.setLayout ( mainPanelLayout );
        mainPanelLayout.setHorizontalGroup (
                mainPanelLayout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                        .addComponent ( headerPanel , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE )
                        .addComponent ( songNameMainPanel , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE )
                        .addComponent ( controlPanel , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE )
        );
        mainPanelLayout.setVerticalGroup (
                mainPanelLayout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                        .addGroup ( mainPanelLayout.createSequentialGroup ( )
                                .addComponent ( headerPanel , javax.swing.GroupLayout.PREFERRED_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.PREFERRED_SIZE )
                                .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.RELATED )
                                .addComponent ( songNameMainPanel , javax.swing.GroupLayout.PREFERRED_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.PREFERRED_SIZE )
                                .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.UNRELATED )
                                .addComponent ( controlPanel , javax.swing.GroupLayout.PREFERRED_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.PREFERRED_SIZE )
                                .addGap ( 0 , 0 , Short.MAX_VALUE ) )
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout ( getContentPane ( ) );
        getContentPane ( ).setLayout ( layout );
        layout.setHorizontalGroup (
                layout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                        .addComponent ( mainPanel , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE )
        );
        layout.setVerticalGroup (
                layout.createParallelGroup ( javax.swing.GroupLayout.Alignment.LEADING )
                        .addComponent ( mainPanel , javax.swing.GroupLayout.DEFAULT_SIZE , javax.swing.GroupLayout.DEFAULT_SIZE , Short.MAX_VALUE )
        );

        pack ( );
        setLocationRelativeTo ( null );
    }// </editor-fold>

    private void playBtnMouseClicked ( ) {
        player.play ( );
    }

    private void stopBtnMouseClicked ( ) {
        player.stop ( );
    }

    private void pauseBtnMouseClicked ( ) {
        player.pause ( );
    }

    private void repeatBtnMouseClicked ( ) {
        if ( !repeat ) {
            repeat = true;
            player.setRepeat ( true );
        } else {
            repeat = false;
            player.setRepeat ( false );
        }
    }

    private void appTitleMousePressed ( java.awt.event.MouseEvent evt ) {
        xMouse = evt.getX ( );
        yMouse = evt.getY ( );
    }

    private void appTitleMouseDragged ( java.awt.event.MouseEvent evt ) {
        int x = evt.getXOnScreen ( );
        int y = evt.getYOnScreen ( );

        this.setLocation ( x - xMouse , y - yMouse );
    }

    private void quitBtnMouseClicked ( ) {
        this.dispose ( );
        if ( !player.isStopped ( ) )
            player.stop ( );
    }

    private void settingsBtnMouseClicked ( ) {
        JOptionPane.showMessageDialog ( this , "Your settings dilog will be popup here!" );
    }

    private void openBtnMouseClicked ( ) {
        JFileChooser openFileChooser = new JFileChooser ( currentDirectory );
        openFileChooser.setFileFilter ( new audioPlayer.FileTypeFilter ( ".mp3" , "Open MP3 Files Only!" ) );
        int result = openFileChooser.showOpenDialog ( null );
        if ( result == JFileChooser.APPROVE_OPTION ) {
            String extension = "";

            int i = openFileChooser.getSelectedFile ( ).getAbsolutePath ( ).lastIndexOf ( '.' );
            int p = Math.max ( openFileChooser.getSelectedFile ( ).getAbsolutePath ( ).lastIndexOf ( '/' ) , openFileChooser.getSelectedFile ( ).getAbsolutePath ( ).lastIndexOf ( '\\' ) );

            if ( i > p ) {
                extension = openFileChooser.getSelectedFile ( ).getAbsolutePath ( ).substring ( i + 1 );
            }
            if ( extension.equals ( ".mp3" ) ) {
                songFile = openFileChooser.getSelectedFile ( );
                player.addToPlayList ( songFile );
                player.skipForward ( );
                currentDirectory = songFile.getAbsolutePath ( );
                songNameDisplay.setText ( "Playing Now... | " + songFile.getName ( ) );
            } else
                JOptionPane.showMessageDialog ( null , "Incompatible extension type!" );
        }
    }

    private void appTitleMouseClicked ( java.awt.event.MouseEvent evt ) {
        if ( evt.getClickCount ( ) == 2 ) {
            if ( !windowCollapsed ) {
                windowCollapsed = true;
                this.setSize ( new Dimension ( this.getSize ( ).width , 50 ) );

                appTitle.setFont ( new Font ( "Nirmala UI" , Font.PLAIN , 12 ) );
                appTitle.setText ( "Playing Now... | " + songFile.getName ( ) );
            } else {
                windowCollapsed = false;
                this.setSize ( new Dimension ( this.getSize ( ).width , 250 ) );

                appTitle.setFont ( new Font ( "Nirmala UI" , Font.PLAIN , 18 ) );
                appTitle.setText ( appName );
            }
        }
    }

    private void volumeDownBtnMouseClicked ( ) {
        volumeDownControl ( );
    }

    private void volumeUpBtnMouseClicked ( ) {
        volumeUpControl ( );
    }

    private void volumeFullBtnMouseClicked ( ) {
        volumeControl ( 1.0 );
    }

    private void muteBtnMouseClicked ( ) {
        volumeControl ( 0.0 );
    }
    // End of variables declaration

    // I am going to create a custom MP3Player Method
    private MP3Player mp3Player ( ) {
        return new MP3Player ( );
    }

    // Let's Set Volume Down Method It's not necessary to remeber this code.
    private void volumeDownControl ( ) {
        // Get Mixer Information From AudioSystem
        Mixer.Info[] mixers = AudioSystem.getMixerInfo ( );
        // Now use a for loop to list all mixers
        for ( Mixer.Info mixerInfo : mixers ) {
            // Get Mixer
            Mixer mixer = AudioSystem.getMixer ( mixerInfo );
            // Now Get Target Line
            Line.Info[] lineInfos = mixer.getTargetLineInfo ( );
            // Here again use for loop to list lines
            for ( Line.Info lineInfo : lineInfos ) {
                // Make a null line
                Line line = null;
                // Make a boolean as opened
                boolean opened = true;
                // Now use try exception for opening a line
                try {
                    line = mixer.getLine ( lineInfo );
                    opened = line.isOpen ( ) || line instanceof Clip;
                    // Now Check If Line Is not Opened
                    if ( !opened ) {
                        // Open Line
                        line.open ( );
                    }
                    // Make a float control
                    FloatControl volControl = (FloatControl) line.getControl ( FloatControl.Type.VOLUME );
                    // Get Current Volume Now
                    float currentVolume = volControl.getValue ( );
                    // Make a temp double variable and store valuePlusMinus
                    double volumeToCut = 0.1;
                    // Make a float and calculate the addition or subtraction in volume
                    float changedCalc = (float) (currentVolume - volumeToCut);
                    // Now Set This Changed Value Into Volume Line.
                    volControl.setValue ( changedCalc );

                } catch ( LineUnavailableException | IllegalArgumentException ignored ) {
                } finally {
                    // Close Line If it opened
                    if ( line != null && !opened ) {
                        line.close ( );
                    }
                }
            }
        }
    }

    // Let's Set Volume Up Method It's not necessary to remeber this code.
    private void volumeUpControl ( ) {
        // Get Mixer Information From AudioSystem
        Mixer.Info[] mixers = AudioSystem.getMixerInfo ( );
        // Now use a for loop to list all mixers
        for ( Mixer.Info mixerInfo : mixers ) {
            // Get Mixer
            Mixer mixer = AudioSystem.getMixer ( mixerInfo );
            // Now Get Target Line
            Line.Info[] lineInfos = mixer.getTargetLineInfo ( );
            // Here again use for loop to list lines
            for ( Line.Info lineInfo : lineInfos ) {
                // Make a null line
                Line line = null;
                // Make a boolean as opened
                boolean opened = true;
                // Now use try exception for opening a line
                try {
                    line = mixer.getLine ( lineInfo );
                    opened = line.isOpen ( ) || line instanceof Clip;
                    // Now Check If Line Is not Opened
                    if ( !opened ) {
                        // Open Line
                        line.open ( );
                    }
                    // Make a float control
                    FloatControl volControl = (FloatControl) line.getControl ( FloatControl.Type.VOLUME );
                    // Get Current Volume Now
                    float currentVolume = volControl.getValue ( );
                    // Make a temp double variable and store valuePlusMinus
                    double volumeToCut = 0.1;
                    // Make a float and calculate the addition or subtraction in volume
                    float changedCalc = (float) (currentVolume + volumeToCut);
                    // Now Set This Changed Value Into Volume Line.
                    volControl.setValue ( changedCalc );

                } catch ( LineUnavailableException | IllegalArgumentException ignored ) {
                } finally {
                    // Close Line If it opened
                    if ( line != null && !opened ) {
                        line.close ( );
                    }
                }
            }
        }
    }

    // Let's Set Volume Method It's not necessary to remeber this code.
    private void volumeControl ( Double valueToPlusMinus ) {
        // Get Mixer Information From AudioSystem
        Mixer.Info[] mixers = AudioSystem.getMixerInfo ( );
        // Now use a for loop to list all mixers
        for ( Mixer.Info mixerInfo : mixers ) {
            // Get Mixer
            Mixer mixer = AudioSystem.getMixer ( mixerInfo );
            // Now Get Target Line
            Line.Info[] lineInfos = mixer.getTargetLineInfo ( );
            // Here again use for loop to list lines
            for ( Line.Info lineInfo : lineInfos ) {
                // Make a null line
                Line line = null;
                // Make a boolean as opened
                boolean opened = true;
                // Now use try exception for opening a line
                try {
                    line = mixer.getLine ( lineInfo );
                    opened = line.isOpen ( ) || line instanceof Clip;
                    // Now Check If Line Is not Opened
                    if ( !opened ) {
                        // Open Line
                        line.open ( );
                    }
                    // Make a float control
                    FloatControl volControl = (FloatControl) line.getControl ( FloatControl.Type.VOLUME );
                    // Get Current Volume Now
                    // Make a temp double variable and store valuePlusMinus
                    // Make a float and calculate the addition or subtraction in volume
                    float changedCalc = (float) ((double) valueToPlusMinus);
                    // Now Set This Changed Value Into Volume Line.
                    volControl.setValue ( changedCalc );

                } catch ( LineUnavailableException | IllegalArgumentException ignored ) {
                } finally {
                    // Close Line If it opened
                    if ( line != null && !opened ) {
                        line.close ( );
                    }
                }
            }
        }
    }

    public boolean isRunning ( ) {
        return running;
    }
}
